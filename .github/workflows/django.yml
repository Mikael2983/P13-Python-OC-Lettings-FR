name: Django CI

on:
  push:
    branches: ["**"]  # DÃ©clenche le workflow sur toutes les branches
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    env:
      OC_LETTINGS_SECRET_KEY: ${{ secrets.OC_LETTINGS_SECRET_KEY }}
      SENTRY_DSN_OC_LETTINGS: ${{ secrets.SENTRY_DSN_OC_LETTINGS }}
      DEBUG: False
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest-cov

      - name: Apply migrations
        run: python manage.py migrate

  lint:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install flake8
        run: pip install flake8
      - name: Run flake8
        run: flake8 .

  tests:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]
    env:
      OC_LETTINGS_SECRET_KEY: ${{ secrets.OC_LETTINGS_SECRET_KEY }}
      SENTRY_DSN_OC_LETTINGS: ${{ secrets.SENTRY_DSN_OC_LETTINGS }}
      DEBUG: True
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Dependencies
        run: pip install -r requirements.txt pytest-cov
      - name: Run Tests with Coverage
        run: pytest --cov=./ --cov-report=term --cov-report=html:coverage-report --cov-fail-under=80
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: coverage-report/

  quality:
    runs-on: ubuntu-latest
    needs: tests
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Run Code Climate analysis
        run: |
          mkdir codequality-results
          docker run \
            --env CODECLIMATE_CODE="$PWD" \
            --volume "$PWD":/code \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            --volume /tmp/cc:/tmp/cc \
            codeclimate/codeclimate analyze -f html > ./codequality-results/index.html
      - name: Upload code quality results
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-report
          path: codequality-results/

  docker:
      needs: tests
      if: github.ref == 'refs/heads/master'  # Only runs on master
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: Log in to DockerHub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Build and Push Docker image
          uses: docker/build-push-action@v5
          with:
            context: .
            file: ./Dockerfile
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/python_lettings_fr:latest

        - name: Deploy to production
          uses: johnbeynon/render-deploy-action@v0.0.8
          with:
            service-id: ${{ secrets.RENDER_SERVICE_ID }}
            api-key: ${{ secrets.RENDER_TOKEN }}
